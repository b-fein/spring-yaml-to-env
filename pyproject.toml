# SPDX-FileCopyrightText: 2022 Benedikt Fein
#
# SPDX-License-Identifier: EUPL-1.2

[tool.poetry]
name = "spring_yaml_to_env"
version = "1.0.0"
description = ""
authors = ["Benedikt Fein <fein@fim.uni-passau.de>"]

[tool.poetry.dependencies]
python = ">=3.11,<4.0"
PyYAML = "~6.0.0"

[tool.poetry.group.dev.dependencies]
black = "^24.0.0"
darglint2 = "^1.8"
isort = { extras = ["pyproject"], version = "^5.10" }
mypy = "^1.0"
pyupgrade = "^3.9.0"
reuse = "^5.0.0"
ruff = "^0.7.0"
tox = "^4.0"
types-PyYAML = "^6.0"

[tool.poetry.group.test.dependencies]
coverage = "^7.0"
pytest = "^8.0.0"
pytest-cov = "^6.0.0"
pytest-sugar = "^1.0.0"


[tool.black]
line-length = 88
target_version = ["py311"]
include = '\.pyi?$'


[tool.isort]
profile = "black"
line_length=88
multi_line_output=3
include_trailing_comma=true
indent='    '


[tool.mypy]
check_untyped_defs = true
disallow_any_unimported = true
disallow_untyped_defs = true
no_implicit_optional = true
show_error_codes = true
warn_return_any = true
warn_unused_ignores = true
warn_redundant_casts = true
warn_unused_configs = true


[tool.ruff]
line-length = 88
output-format = "full"
target-version = "py311"

[tool.ruff.lint]
select = ["ALL"]
# base set of ignored rules, to be adapted as needed
# https://beta.ruff.rs/docs/rules/
ignore = [
    "ANN003", # typing annotations for kwargs, self, cls not needed
    "ANN101",
    "ANN102",
    "COM", # trailing commas -> black
    "D", # documentation
    "E", # code style -> black
    "I", # import order -> isort
    "ISC",
    "T20", # allow print statements
]
exclude = [
    "docs",
    ".venv",
    "venv",
    ".mypy_cache",
    ".pytest_cache",
]

[tool.ruff.lint.per-file-ignores]
"tests/**" = [
    "PLR", # pylint refactoring suggestions
    "S101" # assertions
]


[tool.coverage.run]
branch = true
source = ["spring_yaml_to_env", "tests"]
omit = ["tests/fixtures/*"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "def __str__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
    "if typing.TYPE_CHECKING:"
]

[tool.coverage.html]
directory = "cov_html"


[tool.pytest.ini_options]
testpaths = [
    "tests",
]


[build-system]
requires = ["poetry-core>=1.0.0", "cython"]
build-backend = "poetry.core.masonry.api"
